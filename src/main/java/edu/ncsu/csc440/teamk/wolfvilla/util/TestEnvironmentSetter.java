package edu.ncsu.csc440.teamk.wolfvilla.util;

import java.io.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

/**
 * Creates and populates the database with the appropriate tables and testing data
 * Can also be used to reset the database to the default state if an error occurred
 * Created by xm on 10/18/16.
 */
public class TestEnvironmentSetter {

    public static void main(String[] args) throws Exception {
        if (args.length == 1 && args[0].equals("demo")) {
            setUpDemo();
            return;
        }
        setUp();
    }

    /**
     * Parses the createTables.sql file and adds it to a list of strings
     * Then calls a method which iterates through the list of strings to execute them
     *
     * @throws Exception if the database cannot be connected to
     */
    public static void setUpDemo() throws Exception {
        System.out.println("Setting up demo data...");
        createTables();
        executeFile("sql/demoData.sql");
    }

    /**
     * Parses the createTables.sql file and adds it to a list of strings
     * Then calls a method which iterates through the list of strings to execute them
     *
     * @throws Exception if the database cannot be connected to
     */
    public static void setUp() throws Exception {
        System.out.println("Setting up test data...");
        createTables();
        executeFile("sql/insertTestData.sql");
    }

    private static void createTables() throws SQLException, IOException, ClassNotFoundException {
        executeFile("sql/createTables.sql");
    }

    private static void executeFile(String filename) throws IOException, SQLException, ClassNotFoundException {
        TestEnvironmentSetter sqlExecutor = new TestEnvironmentSetter();
        List<String> queries2 = sqlExecutor.parseSQLFile(filename);

        try (Connection conn = DBConnection.getConnection()) {
            sqlExecutor.executeSQL(conn, queries2);
        }
    }

    /**
     * For each string in queries, attempts to execute the contents as an SQL statement
     * Otherwise, prints the error message generated by SQL
     *
     * @param conn    the database connection
     * @param queries a list of strings that hold SQL statements
     * @throws SQLException
     */
    public void executeSQL(Connection conn, List<String> queries) throws SQLException {
        Statement stmt = conn.createStatement();
        for (String sql : queries) {
            try {
                stmt.execute(sql);
            } catch (SQLException e) {
                System.out.println(e.getMessage() + " from executing: " + sql);
            }
        }
        stmt.close();
    }

    /**
     * Parses the .sql files located in the sql directory, and adds them to a list of strings.
     *
     * @param filepath the location of the SQL file, stored as a string
     * @return queries a list of strings of the processed SQL statements
     * @throws IOException if the file could not be opened properly
     */
    private List<String> parseSQLFile(String filepath) throws IOException {
        List<String> queries = new ArrayList<String>();

        BufferedReader reader = null;
        FileReader fileReader = null;
        try {
            fileReader = new FileReader(new File(filepath));
            reader = new BufferedReader(fileReader);
            String line = "";
            String currentQuery = "";
            //Assuming the file was opened correctly, iterate through until a semicolon is seen
            //Add character by character until a semicolon is seen, then move onto the next spot in the list
            while ((line = reader.readLine()) != null) {
                for (int i = 0; i < line.length(); i++) {
                    if (line.charAt(i) == ';') {
                        queries.add(currentQuery);
                        currentQuery = "";
                    } else {
                        currentQuery += line.charAt(i);
                    }
                }
                currentQuery += " ";
            }
        } finally {
            //Always close the resources opened by the file system
            try {
                if (!(fileReader == null)) fileReader.close();
            } finally {
                if (!(reader == null)) reader.close();
            }
        }
        return queries;
    }

}
